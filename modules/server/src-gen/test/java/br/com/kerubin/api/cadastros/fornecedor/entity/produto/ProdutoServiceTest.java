/**********************************************************************************************
Code generated by MKL Plug-in
Copyright: Kerubin - kerubin.platform@gmail.com

WARNING: DO NOT CHANGE THIS CODE BECAUSE THE CHANGES WILL BE LOST IN THE NEXT CODE GENERATION.
***********************************************************************************************/

package br.com.kerubin.api.cadastros.fornecedor.entity.produto;

import br.com.kerubin.api.cadastros.fornecedor.entity.foto.FotoEntity;
import java.util.Set;
import java.util.HashSet;
import br.com.kerubin.api.cadastros.fornecedor.entity.foto.FotoLookupResult;
import org.junit.runner.RunWith;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.boot.test.context.TestConfiguration;
import org.springframework.context.annotation.Bean;
import javax.inject.Inject;
import br.com.kerubin.api.cadastros.fornecedor.entity.foto.FotoRepository;
import org.springframework.boot.test.mock.mockito.MockBean;
import br.com.kerubin.api.messaging.core.DomainEntityEventsPublisher;
import br.com.kerubin.api.cadastros.fornecedor.entity.produto.ProdutoEntity;
import br.com.kerubin.api.cadastros.fornecedor.entity.produto.ProdutoLookupResult;
import java.util.Arrays;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.times;
import static org.mockito.ArgumentMatchers.any;
import java.util.List;
import java.util.ArrayList;
import java.util.stream.Collectors;
import java.util.Collection;
import br.com.kerubin.api.cadastros.fornecedor.entity.foto.FotoAutoComplete;

import org.junit.Test;
import static org.assertj.core.api.Assertions.assertThat;
import br.com.kerubin.api.cadastros.fornecedor.CadastrosFornecedorBaseEntityTest;


@RunWith(SpringRunner.class)
public class ProdutoServiceTest extends CadastrosFornecedorBaseEntityTest {
	
	private static final String[] IGNORED_FIELDS = { "id", "fotos" };
	
	@TestConfiguration
	static class ProdutoServiceTestConfig {
		
		@Bean
		public ProdutoListFilterPredicate produtoListFilterPredicate() {
			return new ProdutoListFilterPredicateImpl();
		}
		
		@Bean
		public ProdutoService produtoService() {
			return new ProdutoServiceImpl();
		}
		
		@Bean
		public ProdutoDTOConverter produtoDTOConverter() {
			return new ProdutoDTOConverter();
		}
		
	}
	
	
	@Inject
	protected ProdutoService produtoService;
	
	@Inject
	protected ProdutoDTOConverter produtoDTOConverter;
	
	@Inject
	protected ProdutoRepository produtoRepository;
	
	@Inject
	protected FotoRepository fotoRepository;
	
	@MockBean
	protected DomainEntityEventsPublisher publisher;
	
	// BEGIN CREATE TESTS
	
	@Test
	public void testCreateWithAllFields() throws Exception {
		ProdutoEntity produto = new ProdutoEntity();
		
		produto.setNome(generateRandomString(255));
		
		produto.setFotos(newFotoEntityList(3, produto));
		
		ProdutoEntity produtoEntity = produtoService.create(produto);
		em.flush();
		verify(publisher, times(0)).publish(any());
		ProdutoEntity actual = produtoEntity;
		
		
		assertThat(actual).isNotNull();
		assertThat(actual.getId()).isNotNull();
		assertThat(actual).isEqualToIgnoringGivenFields(produto, IGNORED_FIELDS);
		
		
		assertThat(actual.getFotos()).isNotNull();
		assertThat(actual.getFotos()).hasSize(3);
		
		// Ids can be null in one of sides
		actual.getFotos().forEach(it -> it.setId(null));
		produto.getFotos().forEach(it -> it.setId(null));
		
		assertThat(actual.getFotos()).isEqualTo(produto.getFotos());
		
	}
	
	@Test
	public void testCreateWithOnlyRecairedFields() throws Exception {
		ProdutoEntity produto = new ProdutoEntity();
		
		produto.setNome(generateRandomString(255));
		ProdutoEntity produtoEntity = produtoService.create(produto);
		em.flush();
		verify(publisher, times(0)).publish(any());
		ProdutoEntity actual = produtoEntity;
		
		
		assertThat(actual).isNotNull();
		assertThat(actual.getId()).isNotNull();
		assertThat(actual).isEqualToIgnoringGivenFields(produto, IGNORED_FIELDS);
		
		assertThat(actual.getFotos()).isEmpty();
	}
	// END CREATE TESTS
	
	// BEGIN READ TESTS
	
	@Test
	public void testRead1() {
		ProdutoEntity expectedProdutoEntity = newProdutoEntity();
		java.util.UUID id = expectedProdutoEntity.getId();
		Produto expected = produtoDTOConverter.convertEntityToDto(expectedProdutoEntity);
		ProdutoEntity readProdutoEntity = produtoService.read(id);
		Produto actual = produtoDTOConverter.convertEntityToDto(readProdutoEntity);
		
		assertThat(actual).isEqualToComparingFieldByField(expected);
		
	}
	// END READ TESTS
	
	// BEGIN UPDATE TESTS
	
	@Test
	public void testUpdateWithAllFields() throws Exception {
		ProdutoEntity oldProdutoEntity = newProdutoEntity();
		java.util.UUID id = oldProdutoEntity.getId();
				
		ProdutoEntity produto = new ProdutoEntity();
		produto.setId(id);
		
		produto.setNome(generateRandomString(255));
		
		produto.setFotos(newFotoEntityList(3, produto));
		
		ProdutoEntity produtoEntity = produtoService.update(id, produto);
		em.flush();
		verify(publisher, times(0)).publish(any());
		
		ProdutoEntity actual = produtoEntity;
		
		assertThat(actual).isNotNull();
		assertThat(actual.getId()).isNotNull();
		assertThat(actual).isEqualToIgnoringGivenFields(produto, IGNORED_FIELDS);
		
		
		assertThat(actual.getFotos()).isNotNull();
		assertThat(actual.getFotos()).hasSize(3);
		
		// Ids can be null in one of sides
		actual.getFotos().forEach(it -> it.setId(null));
		produto.getFotos().forEach(it -> it.setId(null));
		
		assertThat(actual.getFotos()).isEqualTo(produto.getFotos());
		
	}
	
	@Test
	public void testUpdateWithOnlyRecairedFields() throws Exception {
		ProdutoEntity oldProdutoEntity = newProdutoEntity();
		java.util.UUID id = oldProdutoEntity.getId();
				
		ProdutoEntity produto = new ProdutoEntity();
		produto.setId(id);
		
		produto.setNome(generateRandomString(255));
		ProdutoEntity produtoEntity = produtoService.update(id, produto);
		em.flush();
		verify(publisher, times(0)).publish(any());
		
		ProdutoEntity actual = produtoEntity;
		
		assertThat(actual).isNotNull();
		assertThat(actual.getId()).isNotNull();
		assertThat(actual).isEqualToIgnoringGivenFields(produto, IGNORED_FIELDS);
		
		assertThat(actual.getFotos()).isEmpty();
	}
	// END UPDATE TESTS
	
	// BEGIN DELETE TESTS
	
	@Test
	public void testDelete1() {
		ProdutoEntity expected = newProdutoEntity();
		java.util.UUID id = expected.getId();
		
		
		expected = em.find(ProdutoEntity.class, id);
		assertThat(expected).isNotNull();
		produtoService.delete(id);
		verify(publisher, times(0)).publish(any());
		
		expected = em.find(ProdutoEntity.class, id);
		assertThat(expected).isNull();
	}
	// END DELETE TESTS
	
	// BEGIN LIST TESTS
	// END LIST TESTS
	
	// BEGIN Autocomplete TESTS
	@Test
	public void testAutoComplete() {
		// Reset lastDate field to start LocalDate fields with today in this test. 
		resetNextDate();
					
		// Generate 33 records of data for ProdutoEntity for this test.
		List<ProdutoEntity> testData = new ArrayList<>();
		final int lastRecord = 33;
		final int firstRecord = 1;
		for (int i = firstRecord; i <= lastRecord; i++) {
			testData.add(newProdutoEntity());
		}
		
		// Check if 33 records of ProdutoEntity was generated.
		long count = produtoRepository.count();
		assertThat(count).isEqualTo(lastRecord);
		
		// Extracts 1 records of ProdutoEntity randomly from testData.
		final int resultSize = 1;
		List<ProdutoEntity> filterTestData = getRandomItemsOf(testData, resultSize);
		
		// Extracts a list with only ProdutoEntity.nome field and configure this list as a filter.
		List<String> nomeListFilter = filterTestData.stream().map(ProdutoEntity::getNome).collect(Collectors.toList());
		// Mount the autocomplete query expression and call it.
		String query = nomeListFilter.get(0);
		Collection<ProdutoAutoComplete> result = produtoService.autoComplete(query);
		
		// Assert ProdutoAutoComplete results.
		assertThat(result).isNotNull().hasSize(1)
		.extracting(ProdutoAutoComplete::getNome)
		.containsExactlyInAnyOrderElementsOf(nomeListFilter);
	}
	
	// END Autocomplete TESTS
	
	
	// BEGIN Relationships Autocomplete TESTS
	
	@Test
	public void testProdutoFotosAutoComplete() {
		// Reset lastDate field to start LocalDate fields with today in this test. 
		resetNextDate();
					
		// Generate 3 records of data for FotoEntity for this test.
		List<FotoEntity> testData = new ArrayList<>();
		final int lastRecord = 3;
		ProdutoEntity produtoEntity = newProdutoEntity(/*lastRecord*/);
		testData.addAll(produtoEntity.getFotos());
		
		// Check if 3 records of FotoEntity was generated.
		long count = fotoRepository.count();
		assertThat(count).isEqualTo(lastRecord);
		
		// Extracts 1 records of FotoEntity randomly from testData.
		final int resultSize = 1;
		List<FotoEntity> filterTestData = getRandomItemsOf(testData, resultSize);
		
		// Extracts a list with only FotoEntity.nome field and configure this list as a filter.
		List<String> nomeListFilter = filterTestData.stream().map(FotoEntity::getNome).collect(Collectors.toList());
		String query = nomeListFilter.get(0);
		
		Collection<FotoAutoComplete> result = produtoService.fotoFotosAutoComplete(query);
		
		assertThat(result).isNotNull().hasSize(1)
		.extracting(FotoAutoComplete::getNome)
		.containsExactlyInAnyOrderElementsOf(nomeListFilter);
	}
	
	// END Relationships Autocomplete TESTS
	
	// BEGIN tests for Sum Fields
	// END tests for Sum Fields
	
	// BEGIN tests for Sum Fields
	// END tests for Sum Fields
	
	// BEGIN TESTS DEPENDENCIES
	
	
	protected ProdutoEntity newProdutoEntity() {
		ProdutoEntity produtoEntity = new ProdutoEntity();
		
		produtoEntity.setNome(generateRandomString(255));
		
		produtoEntity.setFotos(newFotoEntityList(3, produtoEntity));
		produtoEntity = em.persistAndFlush(produtoEntity);
		return produtoEntity;
	}
	
	
	protected ProdutoLookupResult newProdutoLookupResult(ProdutoEntity produtoEntity) {
		ProdutoLookupResult produto = new ProdutoLookupResult();
		
		produto.setId(produtoEntity.getId());
		produto.setNome(produtoEntity.getNome());
		
		return produto;
	}
	
	protected Set<FotoEntity> newFotoEntityList(int listSize, ProdutoEntity produto) {
		Set<FotoEntity> result = new HashSet<>(listSize);
		while (result.size() < listSize) {
			result.add(newFotoEntity(produto));
		}
		return result;
	}
	
	
	protected FotoEntity newFotoEntity(ProdutoEntity produto) {
		FotoEntity fotoEntity = new FotoEntity();
		
		fotoEntity.setImagem("Unit tests".getBytes());
		fotoEntity.setMiniatura("Unit tests".getBytes());
		fotoEntity.setNome(generateRandomString(255));
		fotoEntity.setDescricao(generateRandomString(255));
		fotoEntity.setTamanho(-5697113051400144312L);
		fotoEntity.setTipo(generateRandomString(255));
		fotoEntity.setProduto(produto);
		
		return fotoEntity;
	}
	
	
	protected FotoLookupResult newFotoLookupResult(FotoEntity fotoEntity) {
		FotoLookupResult foto = new FotoLookupResult();
		
		foto.setId(fotoEntity.getId());
		foto.setNome(fotoEntity.getNome());
		
		return foto;
	}
	// END TESTS DEPENDENCIES

}
