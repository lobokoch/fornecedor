/**********************************************************************************************
Code generated by MKL Plug-in
Copyright: Kerubin - kerubin.platform@gmail.com

WARNING: DO NOT CHANGE THIS CODE BECAUSE THE CHANGES WILL BE LOST IN THE NEXT CODE GENERATION.
***********************************************************************************************/

package br.com.kerubin.api.cadastros.fornecedor.entity.foto;

// import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.querydsl.core.types.Predicate;


import br.com.kerubin.api.cadastros.fornecedor.entity.produto.ProdutoAutoComplete;

import br.com.kerubin.api.cadastros.fornecedor.entity.produto.ProdutoRepository;

import java.util.Collection;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import java.util.Optional;
 
@Service
public class FotoServiceImpl implements FotoService {
	
	@Autowired
	private FotoRepository fotoRepository;
	
	@Autowired
	private FotoListFilterPredicate fotoListFilterPredicate;
	
	
	@Autowired
	private ProdutoRepository produtoRepository;
	
	
	@Transactional
	@Override
	public FotoEntity create(FotoEntity fotoEntity) {
		return fotoRepository.save(fotoEntity);
	}
	
	@Transactional(readOnly = true)
	@Override
	public FotoEntity read(java.util.UUID id) {
		return getFotoEntity(id);
	}
	
	@Transactional
	@Override
	public FotoEntity update(java.util.UUID id, FotoEntity fotoEntity) {
		// FotoEntity entity = getFotoEntity(id);
		// BeanUtils.copyProperties(fotoEntity, entity, "id");
		// entity = fotoRepository.save(entity);
		
		FotoEntity entity = fotoRepository.save(fotoEntity);
		
		return entity;
	}
	
	@Transactional
	@Override
	public void delete(java.util.UUID id) {
		
		// Delete it.
		fotoRepository.deleteById(id);
		
		// Force flush to the database, for relationship validation and must throw exception because of this here.
		fotoRepository.flush();
		
	}
	
	@Transactional
	@Override
	public void deleteInBulk(java.util.List<java.util.UUID> idList) {
		// Delete it.
		fotoRepository.deleteInBulk(idList);
		
		// Force flush to the database, for relationship validation and must throw exception because of this here.
		fotoRepository.flush();
	}
	
	
	@Transactional(readOnly = true)
	@Override
	public Page<FotoEntity> list(FotoListFilter fotoListFilter, Pageable pageable) {
		Predicate predicate = fotoListFilterPredicate.mountAndGetPredicate(fotoListFilter);
		
		Page<FotoEntity> resultPage = fotoRepository.findAll(predicate, pageable);
		return resultPage;
	}
	
	@Transactional(readOnly = true)
	protected FotoEntity getFotoEntity(java.util.UUID id) {
		Optional<FotoEntity> fotoEntity = fotoRepository.findById(id);
		if (!fotoEntity.isPresent()) {
			throw new IllegalArgumentException("Foto not found:" + id.toString());
		}
		return fotoEntity.get();
	}
	
	@Transactional(readOnly = true)
	@Override
	public Collection<FotoAutoComplete> autoComplete(String query) {
		Collection<FotoAutoComplete> result = fotoRepository.autoComplete(query);
		return result;
	}
	
	// Begin relationships autoComplete 
	@Transactional(readOnly = true)
	@Override
	public Collection<ProdutoAutoComplete> produtoProdutoAutoComplete(String query) {
		Collection<ProdutoAutoComplete> result = produtoRepository.autoComplete(query);
		return result;
	}
	
	// End relationships autoComplete
	
	
	
}
