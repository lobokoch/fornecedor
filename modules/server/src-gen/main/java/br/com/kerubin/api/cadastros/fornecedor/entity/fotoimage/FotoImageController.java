/**********************************************************************************************
Code generated by MKL Plug-in
Copyright: Kerubin - kerubin.platform@gmail.com

WARNING: DO NOT CHANGE THIS CODE BECAUSE THE CHANGES WILL BE LOST IN THE NEXT CODE GENERATION.
***********************************************************************************************/

package br.com.kerubin.api.cadastros.fornecedor.entity.fotoimage;

import java.util.stream.Collectors;

import javax.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.http.ResponseEntity;
import org.springframework.http.HttpStatus;

import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.DeleteMapping;

import br.com.kerubin.api.cadastros.fornecedor.common.PageResult;

		
import br.com.kerubin.api.cadastros.fornecedor.entity.produto.ProdutoAutoComplete;

import java.util.Collection;
import java.util.List;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.RequestParam;

@RestController
@RequestMapping("cadastros/fornecedor/entities/fotoImage")
public class FotoImageController {
	
	@Autowired
	private FotoImageService fotoImageService;
	
	@Autowired
	FotoImageDTOConverter fotoImageDTOConverter;
	
	@Transactional
	@PostMapping
	public ResponseEntity<FotoImage> create(@Valid @RequestBody FotoImage fotoImage) {
		FotoImageEntity fotoImageEntity = fotoImageService.create(fotoImageDTOConverter.convertDtoToEntity(fotoImage));
		return ResponseEntity.status(HttpStatus.CREATED).body(fotoImageDTOConverter.convertEntityToDto(fotoImageEntity));
	}
	
	@Transactional(readOnly = true)
	@GetMapping("/{id}")
	public ResponseEntity<FotoImage> read(@PathVariable java.util.UUID id) {
		try {
			FotoImageEntity fotoImageEntity = fotoImageService.read(id);
			return ResponseEntity.ok(fotoImageDTOConverter.convertEntityToDto(fotoImageEntity));
		}
		catch(IllegalArgumentException e) {
			return ResponseEntity.notFound().build();
		}
	}
	
	@Transactional
	@PutMapping("/{id}")
	public ResponseEntity<FotoImage> update(@PathVariable java.util.UUID id, @Valid @RequestBody FotoImage fotoImage) {
		try {
			FotoImageEntity fotoImageEntity = fotoImageService.update(id, fotoImageDTOConverter.convertDtoToEntity(fotoImage));
			return ResponseEntity.ok(fotoImageDTOConverter.convertEntityToDto(fotoImageEntity));
		}
		catch(IllegalArgumentException e) {
			return ResponseEntity.notFound().build();
		}
	}
	
	@ResponseStatus(HttpStatus.NO_CONTENT)
	@DeleteMapping("/{id}")
	public void delete(@PathVariable java.util.UUID id) {
		fotoImageService.delete(id);
	}
	
	@ResponseStatus(HttpStatus.NO_CONTENT)
	@PostMapping("/deleteInBulk")
	public void deleteInBulk(@RequestBody java.util.List<java.util.UUID> idList) {
		fotoImageService.deleteInBulk(idList);
	}
	
	@Transactional(readOnly = true)
	@GetMapping
	public PageResult<FotoImage> list(FotoImageListFilter fotoImageListFilter, Pageable pageable) {
		Page<FotoImageEntity> page = fotoImageService.list(fotoImageListFilter, pageable);
		List<FotoImage> content = page.getContent().stream().map(pe -> fotoImageDTOConverter.convertEntityToDto(pe)).collect(Collectors.toList());
		PageResult<FotoImage> pageResult = new PageResult<>(content, page.getNumber(), page.getSize(), page.getTotalElements());
		return pageResult;
	}
	
	@Transactional(readOnly = true)
	@GetMapping("/autoComplete")
	public Collection<FotoImageAutoComplete> autoComplete(@RequestParam("query") String query) {
		Collection<FotoImageAutoComplete> result = fotoImageService.autoComplete(query);
		return result;
	}
	
	
	
	// Begin relationships autoComplete 
	
	@Transactional(readOnly = true)
	@GetMapping("/produtoProdutoAutoComplete")
	public Collection<ProdutoAutoComplete> produtoProdutoAutoComplete(@RequestParam("query") String query) {
		Collection<ProdutoAutoComplete> result = fotoImageService.produtoProdutoAutoComplete(query);
		return result;
	}
	
	// End relationships autoComplete
	
}
