/**********************************************************************************************
Code generated by MKL Plug-in
Copyright: Kerubin - kerubin.platform@gmail.com

WARNING: DO NOT CHANGE THIS CODE BECAUSE THE CHANGES WILL BE LOST IN THE NEXT CODE GENERATION.
***********************************************************************************************/

package br.com.kerubin.api.cadastros.fornecedor.entity.produto;

import javax.persistence.Entity;
import javax.persistence.Table;
import javax.persistence.Id;
import javax.persistence.Column;
import javax.persistence.GeneratedValue;
import org.hibernate.annotations.GenericGenerator;
import javax.validation.constraints.NotBlank;
import javax.validation.constraints.Size;
import br.com.kerubin.api.cadastros.fornecedor.entity.foto.FotoEntity;
import javax.persistence.OneToMany;
import javax.persistence.FetchType;
import javax.persistence.CascadeType;
import java.util.Set;
import java.util.HashSet;

@Entity
@Table(name = "produto")
public class ProdutoEntity  {

	@GeneratedValue(generator = "uuid2")
	@GenericGenerator(name = "uuid2", strategy = "uuid2")
	@Id
	@Column(name="id")
	private java.util.UUID id;
	
	@NotBlank(message="\"nome\" é obrigatório.")
	@Size(max = 255, message = "\"nome\" pode ter no máximo 255 caracteres.")
	@Column(name="nome")
	private String nome;
	
	@OneToMany(mappedBy = "produto", fetch = FetchType.LAZY, cascade = CascadeType.REMOVE , orphanRemoval = true)
	private Set<FotoEntity> fotos = new HashSet<>();
	
	public java.util.UUID getId() {
		return id;
	}
	
	public String getNome() {
		return nome;
	}
	
	public java.util.Set<FotoEntity> getFotos() {
		return fotos;
	}
	
	public void setId(java.util.UUID id) {
		this.id = id;
	}
	
	public void setNome(String nome) {
		this.nome = nome != null ? nome.trim() : nome; // Chamadas REST fazem trim.
	}
	
	public void setFotos(java.util.Set<FotoEntity> fotos) {
		// First remove existing items.
		if (this.fotos != null) {
			this.fotos.clear();
		}
		
		if (fotos != null) {
			fotos.forEach(this::addFoto);
		}
	}
	
	public void addFoto(FotoEntity foto) {
		this.fotos.add(foto);
		foto.setProduto(this);
	}
	
	public void removeFoto(FotoEntity foto) {
		this.fotos.remove(foto);
		foto.setProduto(null);
	}
	
	public void assign(ProdutoEntity source) {
		if (source != null) {
			this.setId(source.getId());
			this.setNome(source.getNome());
			this.setFotos(source.getFotos());
		}
	}
	
	public ProdutoEntity clone() {
		return clone(new java.util.HashMap<>());
	}
	
	public ProdutoEntity clone(java.util.Map<Object, Object> visited) {
		if (visited.containsKey(this)) {
			return (ProdutoEntity) visited.get(this);
		}
				
		ProdutoEntity theClone = new ProdutoEntity();
		visited.put(this, theClone);
		
		theClone.setId(this.getId());
		theClone.setNome(this.getNome());
		theClone.setFotos(this.getFotos() != null ? this.getFotos().stream().map(it -> it.clone(visited)).collect(java.util.stream.Collectors.toSet()) : null);
		
		return theClone;
	}
	
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		ProdutoEntity other = (ProdutoEntity) obj;
			
		
		// Field: id
		if (id == null) {
			if (other.id != null) {
				return false;
			}
		} else if (!id.equals(other.id))
			return false;
		
		// Field: nome
		if (nome == null) {
			if (other.nome != null) {
				return false;
			}
		} else if (!nome.equals(other.nome))
			return false;
		
		// Field: fotos
		if (fotos == null) {
			if (other.fotos != null) {
				return false;
			}
		} else if (fotos.size() != other.fotos.size()) {
			return false;
		} else if (!fotos.stream().allMatch(it1 -> other.fotos.stream().anyMatch(it2 -> it1.getId().equals(it2.getId())))) {
			return false;
		}
		
		return true;
	}
	
	@Override
	public int hashCode() {
		return 31;
	}
	
	/* 
	@Override
	public String toString() {
		// Enabling toString for JPA entities will implicitly trigger lazy loading on all fields.
	}
	*/

}
