/**********************************************************************************************
Code generated by MKL Plug-in
Copyright: Kerubin - kerubin.platform@gmail.com

WARNING: DO NOT CHANGE THIS CODE BECAUSE THE CHANGES WILL BE LOST IN THE NEXT CODE GENERATION.
***********************************************************************************************/

package br.com.kerubin.api.cadastros.fornecedor.entity.fotoimage;

// import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.querydsl.core.types.Predicate;


import br.com.kerubin.api.cadastros.fornecedor.entity.produto.ProdutoAutoComplete;

import br.com.kerubin.api.cadastros.fornecedor.entity.produto.ProdutoRepository;

import java.util.Collection;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import java.util.Optional;
 
@Service
public class FotoImageServiceImpl implements FotoImageService {
	
	@Autowired
	private FotoImageRepository fotoImageRepository;
	
	@Autowired
	private FotoImageListFilterPredicate fotoImageListFilterPredicate;
	
	
	@Autowired
	private ProdutoRepository produtoRepository;
	
	
	@Transactional
	@Override
	public FotoImageEntity create(FotoImageEntity fotoImageEntity) {
		return fotoImageRepository.save(fotoImageEntity);
	}
	
	@Transactional(readOnly = true)
	@Override
	public FotoImageEntity read(java.util.UUID id) {
		return getFotoImageEntity(id);
	}
	
	@Transactional
	@Override
	public FotoImageEntity update(java.util.UUID id, FotoImageEntity fotoImageEntity) {
		// FotoImageEntity entity = getFotoImageEntity(id);
		// BeanUtils.copyProperties(fotoImageEntity, entity, "id");
		// entity = fotoImageRepository.save(entity);
		
		FotoImageEntity entity = fotoImageRepository.save(fotoImageEntity);
		
		return entity;
	}
	
	@Transactional
	@Override
	public void delete(java.util.UUID id) {
		
		// Delete it.
		fotoImageRepository.deleteById(id);
		
		// Force flush to the database, for relationship validation and must throw exception because of this here.
		fotoImageRepository.flush();
		
	}
	
	@Transactional
	@Override
	public void deleteInBulk(java.util.List<java.util.UUID> idList) {
		// Delete it.
		fotoImageRepository.deleteInBulk(idList);
		
		// Force flush to the database, for relationship validation and must throw exception because of this here.
		fotoImageRepository.flush();
	}
	
	
	@Transactional(readOnly = true)
	@Override
	public Page<FotoImageEntity> list(FotoImageListFilter fotoImageListFilter, Pageable pageable) {
		Predicate predicate = fotoImageListFilterPredicate.mountAndGetPredicate(fotoImageListFilter);
		
		Page<FotoImageEntity> resultPage = fotoImageRepository.findAll(predicate, pageable);
		return resultPage;
	}
	
	@Transactional(readOnly = true)
	protected FotoImageEntity getFotoImageEntity(java.util.UUID id) {
		Optional<FotoImageEntity> fotoImageEntity = fotoImageRepository.findById(id);
		if (!fotoImageEntity.isPresent()) {
			throw new IllegalArgumentException("FotoImage not found:" + id.toString());
		}
		return fotoImageEntity.get();
	}
	
	@Transactional(readOnly = true)
	@Override
	public Collection<FotoImageAutoComplete> autoComplete(String query) {
		Collection<FotoImageAutoComplete> result = fotoImageRepository.autoComplete(query);
		return result;
	}
	
	// Begin relationships autoComplete 
	@Transactional(readOnly = true)
	@Override
	public Collection<ProdutoAutoComplete> produtoProdutoAutoComplete(String query) {
		Collection<ProdutoAutoComplete> result = produtoRepository.autoComplete(query);
		return result;
	}
	
	// End relationships autoComplete
	
	
	
}
